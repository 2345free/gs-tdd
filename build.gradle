// gradle构建工具本身的依赖配置(plugins 适用于gradle 2.1以上支持,等价于buildscript)
plugins {
    id 'org.springframework.boot' version '2.0.5.RELEASE'
    id 'org.unbroken-dome.test-sets' version '1.5.1'
}

// gradle插件
// java插件用户编译java源文件等
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
// spring boot打包插件(等价于maven的spring-boot-maven-plugin)
apply plugin: 'org.springframework.boot'
// spring依赖管理插件(dependencyManagement)
apply plugin: 'io.spring.dependency-management'
// 集成测试插件
apply plugin: 'org.unbroken-dome.test-sets'

group = 'com.xiao.gs'
version = '0.0.1-SNAPSHOT'

// java编译器版本
sourceCompatibility = 1.8

// jar包下载来源仓库配置
repositories {
    // 使用本地maven仓库
    mavenLocal()
    // 如果本地maven仓库没有从此仓库下载
    maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
}

// 项目依赖配置
dependencies {

//    compile('org.springframework.boot:spring-boot-starter-amqp')
    compile('org.springframework.boot:spring-boot-starter-aop')
//    compile('org.springframework.boot:spring-boot-starter-data-elasticsearch')
//    compile('org.springframework.boot:spring-boot-starter-data-jpa')
//    compile('org.springframework.boot:spring-boot-starter-data-mongodb')
//    compile('org.springframework.boot:spring-boot-starter-data-redis')
//    compile('org.springframework.boot:spring-boot-starter-data-rest')
//    compile('org.springframework.boot:spring-boot-starter-jooq')
//    compile('org.springframework.boot:spring-boot-starter-mail')
//    compile('org.springframework.boot:spring-boot-starter-quartz')
//    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-thymeleaf')
    compile('org.springframework.boot:spring-boot-starter-validation')
    compile('org.springframework.boot:spring-boot-starter-web')

    // 监控
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('de.codecentric:spring-boot-admin-starter-client')

    // spring cloud
    compile('org.springframework.cloud:spring-cloud-starter-netflix-hystrix')
    compile('org.springframework.cloud:spring-cloud-starter-netflix-hystrix-dashboard')
    compile('org.springframework.cloud:spring-cloud-starter-netflix-ribbon')
    compile('org.springframework.cloud:spring-cloud-starter-openfeign')

    // http请求重试
    compile('org.springframework.retry:spring-retry')

    // 开发工具
    runtime('org.springframework.boot:spring-boot-devtools')

    // 数据库
    runtime('mysql:mysql-connector-java')
    runtime('org.hsqldb:hsqldb')

    // 代码插件
    compileOnly('org.springframework.boot:spring-boot-configuration-processor')
    compileOnly('org.projectlombok:lombok')
    // 代码插件的注解处理,避免警告: Detecting annotation processors on the compile classpath has been deprecated. Gradle 5.0 will ignore annotation processors on the compile classpath
    annotationProcessor('org.springframework.boot:spring-boot-configuration-processor')
    annotationProcessor('org.projectlombok:lombok')

    // 测试
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('de.flapdoodle.embed:de.flapdoodle.embed.mongo')
    testCompile('org.springframework.security:spring-security-test')
}

// 依赖管理
dependencyManagement {
    imports {
        mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.withType(JavaCompile) { options.encoding = "UTF-8" }

// 集成测试配置
// 参考文章
// https://github.com/unbroken-dome/gradle-testsets-plugin
// https://www.testwithspring.com/lesson/running-integration-tests-with-gradle-spock-edition/
// 自定义测试集integrationTest(配置物理目录名为integration-test)
testSets {
    integrationTest { dirName = 'integration-test' }
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

// 开启测试缓存(执行成功的不再执行)
project.integrationTest {
    outputs.upToDateWhen { false }
}

tasks.withType(Test) {
    reports.html.setDestination(file("${reporting.baseDir}/${name}"))
}

// 测试总结:
// 默认的test目录下的和自定义测试集integration-test目录下的测试类都会执行,并且controller测试类的包名要和真实controller包名一致
