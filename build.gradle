plugins {
    id 'org.springframework.boot' version '2.0.5.RELEASE' apply false
    id 'org.unbroken-dome.test-sets' version '1.5.1' apply false
    id 'io.franzbecker.gradle-lombok' version '1.14' apply false
    id "com.gorylenko.gradle-git-properties" version "1.5.1"
    id "org.sonarqube" version "2.6" apply false
}

allprojects {
    apply plugin: 'eclipse'
    apply plugin: 'idea'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'io.franzbecker.gradle-lombok'
    apply plugin: 'org.unbroken-dome.test-sets'
    apply plugin: 'jacoco'
    apply plugin: "org.sonarqube"

    sourceCompatibility = 1.8

    repositories {
        mavenLocal()
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
    }

    idea {
        module {
            downloadSources = true
            downloadJavadoc = true
        }
    }

    configurations {
        // compile.exclude module: 'spring-boot-starter-logging'
    }

    dependencies {
        compile "org.projectlombok:lombok:$lombokVersion"
        annotationProcessor "org.projectlombok:lombok:$lombokVersion"
        testCompile "org.projectlombok:lombok:$lombokVersion"
        testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:2.0.5.RELEASE"
            mavenBom "de.codecentric:spring-boot-admin-dependencies:2.0.3"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:Finchley.SR1"
        }
    }

    tasks.withType(JavaCompile) { options.encoding = "UTF-8" }

    testSets {
        integrationTest { dirName = 'integration-test' }
    }

    build.dependsOn integrationTest
    integrationTest.mustRunAfter test

    integrationTest.enabled true
    test.enabled true

    test.useJUnit()

    project.integrationTest {
        outputs.upToDateWhen { false }
    }

    tasks.withType(Test) {
        reports.html.destination(file("$reporting.baseDir/$name"))
    }

    task codeCoverageReport(type: JacocoReport) {
        executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

        allprojects.each {
            sourceSets it.sourceSets.main
        }

        reports {
            xml.enabled = true
            xml.destination file("$buildDir/reports/jacoco/report.xml")
            html.enabled = false
            csv.enabled = false
        }
    }

    build.dependsOn codeCoverageReport {
        subprojects*.test
        subprojects*.integrationTest
    }

}
