plugins {
    id "com.ewerk.gradle.plugins.querydsl" version '1.0.10'
    id 'io.github.divinespear.jpa-schema-generate' version '0.3.5.1'
}

querydsl {
    jpa = true
    querydslSourcesDir = "$buildDir/generated-sources/querydsl"
}

sourceSets {
    main {
        java {
            srcDir "$querydsl.querydslSourcesDir"
        }
    }
}

dependencies {
    compile project(':gs-tdd-client')
    compile project(':gs-tdd-ws')

    // compile 'org.springframework.boot:spring-boot-starter-amqp'
    compile 'org.springframework.boot:spring-boot-starter-aop'
//    compile 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
    compile 'com.github.vanroy:spring-boot-starter-data-jest:3.1.5.RELEASE'

    // compile 'org.springframework.boot:spring-boot-starter-log4j2'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'com.querydsl:querydsl-jpa'
    // compile 'org.springframework.boot:spring-boot-starter-data-mongodb'
    compile 'org.springframework.boot:spring-boot-starter-data-redis'
    compile 'redis.clients:jedis'
    // compile 'org.springframework.boot:spring-boot-starter-data-rest'
    // compile 'org.springframework.boot:spring-boot-starter-jooq'
    // compile 'org.springframework.boot:spring-boot-starter-mail'
    // compile 'org.springframework.boot:spring-boot-starter-quartz'

    compile 'org.springframework.boot:spring-boot-starter-cache'
    compile "net.sf.ehcache:ehcache"
    compile "com.github.ben-manes.caffeine:caffeine"

    compile 'org.apache.commons:commons-lang3'
    compile 'commons-beanutils:commons-beanutils:1.9.3'
    compile 'commons-validator:commons-validator:1.6'
    compile "cn.afterturn:easypoi-base:$easypoiVersion"

    compile 'com.github.pagehelper:pagehelper-spring-boot-starter:1.2.10'

    runtime "com.h2database:h2"
    runtime 'mysql:mysql-connector-java'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
}

generateSchema {

    scriptAction = 'drop-and-create'
    format = true

    vendor = 'hibernate' // 'eclipselink', 'hibernate', or 'hibernate+spring'.
    // you can use class name too. (like 'org.hibernate.jpa.HibernatePersistenceProvider')
    packageToScan = ['com.xiao.gs.data.jpa.domain']

    jdbcDriver = 'com.mysql.jdbc.Driver'
    jdbcUrl = 'jdbc:mysql://localhost:3306/gs-tdd'
    jdbcUser = 'root'

    properties = [
            'jadira.usertype.autoRegisterUserTypes': 'true',
            'hibernate.dialect'                    : 'org.hibernate.dialect.MySQL5InnoDBDialect',
            'hibernate.id.new_generator_mappings'  : 'true',
            'hibernate.implicit_naming_strategy'   : 'org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy',
            'hibernate.physical_naming_strategy'   : 'org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy'
    ]

}

